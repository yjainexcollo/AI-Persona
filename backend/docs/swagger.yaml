openapi: 3.0.3
info:
  title: AI-Persona Backend API
  version: 1.0.0
  description: |
    # AI-Persona SaaS Backend API - Core Authentication & User Management

    ## **Overview**
    This API provides enterprise-grade authentication and user management for the AI-Persona SaaS platform. The core module is designed for production environments with advanced security features and compliance.

    ## **Core Features**
    - **Authentication**: Local (email/password) and Google OAuth authentication
    - **Account Lifecycle**: PENDING_VERIFY → ACTIVE → DEACTIVATED → PENDING_DELETION
    - **Email Verification**: 24-hour TTL verification tokens with resend capability
    - **Password Reset**: Secure token-based password reset with 1-hour TTL
    - **Session Management**: Device tracking, session revocation, and token rotation
    - **Account Lockout**: Automatic lockout after failed login attempts (5 attempts → 15 min)
    - **GDPR Compliance**: Account deletion with 30-day grace period

    ## **Security Architecture**
    - **JWT Security**: RSA-256 signing with key rotation and JWKS endpoint
    - **Password Security**: Strength validation + HIBP breach detection
    - **Account Protection**: Rate limiting, lockout, session management
    - **Input Validation**: Comprehensive sanitization and validation
    - **Audit Trail**: Complete event logging with IP, user agent, trace IDs

    ## **Account Lifecycle**
    ```
    PENDING_VERIFY → ACTIVE → DEACTIVATED → PENDING_DELETION
    ```

    ## **Authentication Workflows**

    ### **Local Authentication**
    1. **Registration**: `POST /api/auth/register`
       - Password strength validation (8+ chars, uppercase, lowercase, number, special)
       - HIBP breach detection (real-time)
       - Email verification required (24-hour TTL)
       - Rate limited (5 requests/hour per IP)

    2. **Email Verification**: `GET /api/auth/verify-email?token=`
       - One-time token verification
       - Sets status to ACTIVE
       - Required before login

    3. **Login**: `POST /api/auth/login`
       - Email + password authentication
       - Account lockout after 5 failed attempts (15 min)
       - Session creation with device tracking
       - Rate limited (10 requests/15min per IP)

    4. **Token Refresh**: `POST /api/auth/refresh`
       - Refresh token rotation
       - Old token revocation on reuse
       - New access + refresh tokens

    ### **OAuth Authentication**
    1. **Initiate**: `GET /api/auth/google`
       - Redirects to Google OAuth
       - Public endpoint

    2. **Callback**: `GET /api/auth/google/callback`
       - Handles Google response
       - Automatic account creation
       - Pre-verified email (OAuth users)
       - Redirects to frontend with tokens

    ### **Password Management**
    1. **Request Reset**: `POST /api/auth/request-password-reset`
       - Sends reset email (1-hour TTL)
       - Rate limited (3 requests/hour per IP)

    2. **Reset Password**: `POST /api/auth/reset-password`
       - Validates new password strength
       - HIBP breach detection
       - Revokes all user sessions

    ### **Account Management**
    1. **Deactivate**: `POST /api/auth/deactivate`
       - Sets status to DEACTIVATED
       - Revokes all sessions
       - Blocks login and token refresh

    2. **Delete Account**: `POST /api/auth/delete-account`
       - Sets status to PENDING_DELETION
       - 30-day grace period
       - GDPR compliance

    ### **Session Management**
    1. **List Sessions**: `GET /api/auth/sessions`
       - Shows all active sessions
       - Device info, IP, last activity

    2. **Revoke Session**: `DELETE /api/auth/sessions/{sessionId}`
       - Revokes specific session
       - Immediate logout

    3. **Logout**: `POST /api/auth/logout`
       - Revokes current refresh token
       - Idempotent operation

    ### **Admin Operations**
    1. **User Management**: `GET /api/admin/users`
       - List workspace users
       - Role management
       - Account status management

    2. **Workspace Management**: `GET /api/admin/workspace`
       - Workspace statistics
       - User counts and activity

    ### **Security Endpoints**
    1. **JWKS Endpoint**: `GET /api/auth/.well-known/jwks.json`
       - Public key set for JWT verification
       - Supports key rotation
       - Standard JWKS format

    2. **Key Rotation**: `POST /api/auth/rotate-keys`
       - Rotates RSA key pair (Admin only)
       - Zero-downtime key rotation
       - Maintains backward compatibility

    ## **Rate Limiting**
    - **Registration**: 5 requests/hour per IP
    - **Login**: 10 requests/15min per IP
    - **Password Reset**: 3 requests/hour per IP
    - **Email Verification**: 5 requests/hour per IP

    ## **Error Handling**
    - **400**: Bad Request (validation errors)
    - **401**: Unauthorized (invalid credentials)
    - **403**: Forbidden (insufficient permissions)
    - **404**: Not Found (resource not found)
    - **409**: Conflict (resource already exists)
    - **423**: Locked (account temporarily locked)
    - **429**: Too Many Requests (rate limit exceeded)
    - **500**: Internal Server Error

    ## **Response Format**
    ```json
    {
      "status": "success|error",
      "message": "Human readable message",
      "data": { ... },
      "errors": [ ... ]
    }
    ```

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.ai-persona.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: User Management
    description: User profile and account management
  - name: Admin
    description: Administrative operations
  - name: Security
    description: Security and key management

paths:
  # Health Check
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check if the service is running
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  # Authentication Endpoints
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with email verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePass123!"
                name:
                  type: string
                  minLength: 2
                  example: "John Doe"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccessResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "SecurePass123!"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccessResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Account not verified or deactivated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "423":
          description: Account temporarily locked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefreshResponse"
        "401":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and revoke current session (requires authentication)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/verify-email:
    get:
      tags:
        - Authentication
      summary: Verify email address
      description: Verify user email with token from verification email
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Email verification token
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend verification email
      description: Send new verification email to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        "200":
          description: Verification email sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "429":
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/request-password-reset:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset email to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        "200":
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "429":
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password using token from email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  example: "reset_token_here"
                newPassword:
                  type: string
                  minLength: 8
                  example: "NewSecurePass123!"
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid token or weak password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/sessions:
    get:
      tags:
        - Authentication
      summary: Get user sessions
      description: Get all active sessions for the authenticated user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User sessions retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionsResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/sessions/{sessionId}:
    delete:
      tags:
        - Authentication
      summary: Revoke session
      description: Revoke a specific user session
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Session ID to revoke
      responses:
        "200":
          description: Session revoked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/deactivate:
    post:
      tags:
        - Authentication
      summary: Deactivate account
      description: Deactivate user account (requires authentication)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Account deactivated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/delete-account:
    post:
      tags:
        - Authentication
      summary: Request account deletion
      description: Request account deletion (GDPR compliance)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Account deletion requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # OAuth Endpoints
  /api/auth/google:
    get:
      tags:
        - Authentication
      summary: Google OAuth login
      description: Redirect to Google OAuth for authentication
      responses:
        "302":
          description: Redirect to Google OAuth

  /api/auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Google OAuth callback
      description: Handle Google OAuth callback and create user session
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code from Google
      responses:
        "200":
          description: OAuth login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccessResponse"
        "400":
          description: OAuth error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Security Endpoints
  /api/auth/.well-known/jwks.json:
    get:
      tags:
        - Security
      summary: Get JSON Web Key Set (JWKS)
      description: Returns the JSON Web Key Set (JWKS) containing public keys for JWT verification
      responses:
        "200":
          description: JWKS in standard format
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kty:
                          type: string
                          example: "RSA"
                        use:
                          type: string
                          example: "sig"
                        kid:
                          type: string
                          example: "abc123"
                        n:
                          type: string
                          example: "modulus"
                        e:
                          type: string
                          example: "AQAB"

  /api/auth/rotate-keys:
    post:
      tags:
        - Security
      summary: Rotate JWT keys (Admin only)
      description: Rotates the RSA key pair used for JWT signing and verification
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Keys rotated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Keys rotated successfully"
                  data:
                    type: object
                    properties:
                      newKid:
                        type: string
                        example: "def456"
                      oldKid:
                        type: string
                        example: "abc123"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # User Management Endpoints
  /api/users/profile:
    get:
      tags:
        - User Management
      summary: Get user profile
      description: Get current user profile information
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - User Management
      summary: Update user profile
      description: Update current user profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  example: "John Doe"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Admin Endpoints
  /api/admin/users:
    get:
      tags:
        - Admin
      summary: Get workspace users
      description: Get all users in the current workspace (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of users per page
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, PENDING_VERIFY, DEACTIVATED, PENDING_DELETION]
          description: Filter by user status
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersListResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/users/{userId}:
    put:
      tags:
        - Admin
      summary: Update user (admin only)
      description: Update user status or role (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [ACTIVE, DEACTIVATED]
                  example: "ACTIVE"
                role:
                  type: string
                  enum: [ADMIN, MEMBER]
                  example: "MEMBER"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/workspace:
    get:
      tags:
        - Admin
      summary: Get workspace statistics
      description: Get workspace statistics and user counts (admin only)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Workspace statistics retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceStatsResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Common Response Schemas
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Error message"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Invalid email format"

    # Authentication Response Schemas
    AuthSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "User registered successfully"
        data:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/User"
            workspace:
              $ref: "#/components/schemas/Workspace"
            isNewUser:
              type: boolean
              example: true
            breachWarning:
              type: object
              nullable: true
              properties:
                message:
                  type: string
                  example: "Password found in data breaches"
                severity:
                  type: string
                  enum: [low, medium, high]
                  example: "medium"
                count:
                  type: integer
                  example: 1234

    LoginSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Login successful"
        data:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/User"
            workspace:
              $ref: "#/components/schemas/Workspace"
            accessToken:
              type: string
              example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshToken:
              type: string
              example: "refresh_token_here"
            sessionId:
              type: string
              example: "session_id_here"

    TokenRefreshResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Token refreshed successfully"
        data:
          type: object
          properties:
            accessToken:
              type: string
              example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshToken:
              type: string
              example: "new_refresh_token_here"

    SessionsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Sessions retrieved successfully"
        data:
          type: object
          properties:
            sessions:
              type: array
              items:
                $ref: "#/components/schemas/Session"

    # User Management Response Schemas
    UserProfileResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Profile retrieved successfully"
        data:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/User"

    UsersListResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Users retrieved successfully"
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/User"
            pagination:
              $ref: "#/components/schemas/Pagination"

    UserResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "User updated successfully"
        data:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/User"

    WorkspaceStatsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Workspace statistics retrieved"
        data:
          type: object
          properties:
            workspace:
              $ref: "#/components/schemas/Workspace"
            stats:
              type: object
              properties:
                totalUsers:
                  type: integer
                  example: 42
                activeUsers:
                  type: integer
                  example: 38
                pendingVerification:
                  type: integer
                  example: 3
                deactivatedUsers:
                  type: integer
                  example: 1

    # Data Models
    User:
      type: object
      properties:
        id:
          type: string
          example: "user_id_here"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        status:
          type: string
          enum: [PENDING_VERIFY, ACTIVE, DEACTIVATED, PENDING_DELETION]
          example: "ACTIVE"
        role:
          type: string
          enum: [ADMIN, MEMBER]
          example: "MEMBER"
        emailVerified:
          type: boolean
          example: true
        verifiedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        lastLoginAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Workspace:
      type: object
      properties:
        id:
          type: string
          example: "workspace_id_here"
        name:
          type: string
          example: "My Workspace"
        domain:
          type: string
          example: "example.com"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Session:
      type: object
      properties:
        id:
          type: string
          example: "session_id_here"
        deviceId:
          type: string
          example: "device_id_here"
        userAgent:
          type: string
          example: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
        ipAddress:
          type: string
          example: "192.168.1.1"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        expiresAt:
          type: string
          format: date-time
          example: "2024-01-22T10:30:00Z"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        pages:
          type: integer
          example: 5
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false
