openapi: 3.0.3
info:
  title: AI-Persona Backend API
  version: 1.0.0
  description: |
    # AI-Persona SaaS Backend API

    This API provides robust, secure, and multi-tenant authentication and user management for the AI-Persona SaaS platform.

    **Note:** Most authenticated, workspace-scoped endpoints require the `x-workspace-id` header to enforce strict multi-tenancy. This header must be set to the workspace ID the user is acting within. However, some endpoints (like workspace deletion) get the workspace ID from the URL path and do not require this header.

    ## **Workflow Summary**
    - **New User Registration:**
      1. User registers via `/api/auth/register`.
      2. Receives a verification email. Must verify before logging in.
      3. After verification, can log in and access their workspace.
    - **Password Reset:**
      1. User requests a reset via `/api/auth/request-password-reset` (public endpoint).
      2. Receives a reset email with a secure link.
      3. Resets password via `/api/auth/reset-password` (public endpoint with valid token).

    **Base URLs:** `/api/auth`, `/api/users`, `/api/admin`

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  # ===================================
  # AUTHENTICATION ENDPOINTS
  # ===================================

  /api/auth/register:
    post:
      summary: Register a new user or reactivate deactivated account
      tags: [Auth]
      description: |
        Registers a new user or reactivates a deactivated account. After registration/reactivation, a verification email is sent to the provided email address.

        **Note:** The user must verify their email before they can log in.

        **Reactivation:** If a user with the provided email exists but is deactivated, the account will be reactivated with the new password and name. The user will need to verify their email again.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: newuser@company.com
                password:
                  type: string
                  format: password
                  example: StrongPassword!2025
                name:
                  type: string
                  example: Alice Smith
            example:
              email: newuser@company.com
              password: StrongPassword!2025
              name: Alice Smith
      responses:
        "201":
          description: Registration successful. Verification email sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccessResponse"
              example:
                status: success
                message: Registration successful. Verification email sent.
                data:
                  user:
                    id: cluser_abc123
                    email: newuser@company.com
                    name: Alice Smith
                    role: ADMIN
                    workspaceId: clworkspace_123xyz
                  workspace:
                    id: clworkspace_123xyz
                    domain: company.com
        "200":
          description: Account reactivated. Verification email sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccessResponse"
              example:
                status: success
                message: Account reactivated. Verification email sent.
                data:
                  user:
                    id: cluser_abc123
                    email: reactivated@company.com
                    name: John Doe
                    role: MEMBER
                    workspaceId: clworkspace_123xyz
                  workspace:
                    id: clworkspace_123xyz
                    domain: company.com
        "409":
          description: Email already registered (active account)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/login:
    post:
      summary: Login with email and password
      tags: [Auth]
      description: |
        Logs in a user with email and password. Only users with verified emails can log in.
        If the email is not verified, an error is returned and the user should check their inbox or request a new verification email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: alice@company.com
                password:
                  type: string
                  format: password
                  example: StrongPassword!2025
            example:
              email: alice@company.com
              password: StrongPassword!2025
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccessResponse"
              example:
                status: success
                message: Login successful
                data:
                  user:
                    id: cluser_abc123
                    email: alice@company.com
                    name: Alice Smith
                    role: ADMIN
                    workspaceId: clworkspace_123xyz
                  workspaceId: clworkspace_123xyz
                  workspaceName: Company Workspace
                  accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...abc123
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...xyz789
        "401":
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Email not verified or user account is inactive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/refresh:
    post:
      summary: Refresh access and refresh tokens
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...xyz789
            example:
              refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...xyz789
      responses:
        "200":
          description: Tokens refreshed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshSuccessResponse"
              example:
                status: success
                message: Tokens refreshed
                data:
                  accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...abc123
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...xyz789
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/logout:
    post:
      summary: Logout user
      tags: [Auth]
      description: |
        Logs out a user by invalidating their refresh token. The session will be marked as inactive.
        This endpoint does not require authentication - users can logout even if their token is expired.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...xyz789
            example:
              refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...xyz789
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Logout successful
              example:
                status: success
                message: Logout successful
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # --- OAuth Routes ---
  /api/auth/google:
    get:
      summary: Initiate Google OAuth login
      tags: [OAuth]
      description: |
        Redirects the user to Google for authentication. This is a public endpoint.

        On success, Google will redirect the user to `/api/auth/google/callback`.
      responses:
        "302":
          description: Redirects to Google OAuth login page

  /api/auth/google/callback:
    get:
      summary: Google OAuth callback
      tags: [OAuth]
      description: |
        Handles the callback from Google after user authentication.

        On success, redirects to frontend with token and workspace info.
        On failure, redirects to `/login` or returns an error.
      responses:
        "302":
          description: Redirects to frontend with OAuth tokens
        "500":
          description: OAuth login failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/verify-email:
    get:
      summary: Verify user email with a token
      tags: [Auth]
      description: |
        Verifies a user's email address using a verification token sent via email.
        The token is provided as a query parameter.
      parameters:
        - in: query
          name: token
          schema:
            type: string
            example: 1234567890abcdef
          required: true
          description: The email verification token sent to the user's email.
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email verified
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/AuthSuccessResponse/properties/data/properties/user"
              example:
                status: success
                message: Email verified
                data:
                  user:
                    id: cluser_abc123
                    email: alice@company.com
                    name: Alice Smith
                    role: ADMIN
                    workspaceId: clworkspace_123xyz
        "400":
          description: Invalid or expired verification token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/resend-verification:
    post:
      summary: Resend email verification link
      tags: [Auth]
      description: |
        Resends the email verification link to the user. Accepts the user's email in the POST body.
        No authentication is required. Rate limited to 5 requests per hour per IP.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: alice@company.com
            example:
              email: alice@company.com
      responses:
        "200":
          description: Verification email resent
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Verification email resent
              example:
                status: success
                message: Verification email resent
        "400":
          description: Email already verified or invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Too many requests (rate limit exceeded)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/request-password-reset:
    post:
      summary: Request password reset
      tags: [Auth]
      description: |
        Allows a user who forgot their password to request a password reset link to be sent to their email address. This endpoint is public and does not require authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: alice@company.com
            example:
              email: alice@company.com
      responses:
        "200":
          description: If an account with that email exists, a password reset link has been sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: If an account with that email exists, a password reset link has been sent.
              example:
                status: success
                message: If an account with that email exists, a password reset link has been sent.
        "400":
          description: Email is required or invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/reset-password:
    post:
      summary: Reset password
      tags: [Auth]
      description: |
        Allows a user to reset their password using a valid reset token and a new password. This endpoint is public and does not require authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  example: 1234567890abcdef
                newPassword:
                  type: string
                  format: password
                  example: NewStrongPassword!2025
            example:
              token: 1234567890abcdef
              newPassword: NewStrongPassword!2025
      responses:
        "200":
          description: Password has been reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password has been reset successfully.
              example:
                status: success
                message: Password has been reset successfully.
        "400":
          description: Token and new password are required, or invalid/expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # ===================================
  # USER ENDPOINTS
  # ===================================

  /api/users/me:
    get:
      summary: Get current user profile
      tags: [User]
      description: |
        **RBAC:** Any authenticated user can access this endpoint.
        Returns the current user's profile, including workspace and role.

        **Note:** This endpoint does not require the `x-workspace-id` header as users can access their own profile data.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: cluser_abc123
                          email:
                            type: string
                            example: alice@company.com
                          name:
                            type: string
                            example: Alice Smith
                          emailVerified:
                            type: boolean
                            example: true
                          isActive:
                            type: boolean
                            example: true
                          role:
                            type: string
                            example: ADMIN
                          workspaceId:
                            type: string
                            example: clworkspace_123xyz
              example:
                status: success
                data:
                  user:
                    id: cluser_abc123
                    email: alice@company.com
                    name: Alice Smith
                    emailVerified: true
                    isActive: true
                    role: ADMIN
                    workspaceId: clworkspace_123xyz
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update current user profile
      tags: [User]
      description: |
        **RBAC:** Any authenticated user can update their own profile.
        Updates the user's name and email.

        **Note:** This endpoint does not require the `x-workspace-id` header as users can update their own profile.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Alice Johnson
                email:
                  type: string
                  format: email
                  example: alice.johnson@company.com
            example:
              name: Alice Johnson
              email: alice.johnson@company.com
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Profile updated
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/AuthSuccessResponse/properties/data/properties/user"
              example:
                status: success
                message: Profile updated
                data:
                  user:
                    id: cluser_abc123
                    email: alice.johnson@company.com
                    name: Alice Johnson
                    role: ADMIN
                    workspaceId: clworkspace_123xyz
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/users/me/password:
    put:
      summary: Change password
      tags: [User]
      description: |
        **RBAC:** Any authenticated user can change their password.
        Requires the current password and a new password.

        **Note:** This endpoint does not require the `x-workspace-id` header as users can change their own password.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                  example: OldPassword!2024
                newPassword:
                  type: string
                  format: password
                  example: NewStrongPassword!2025
            example:
              currentPassword: OldPassword!2024
              newPassword: NewStrongPassword!2025
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password changed successfully
              example:
                status: success
                message: Password changed successfully
        "400":
          description: Current and new password are required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required or current password incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/users/me/deactivate:
    post:
      summary: Deactivate (soft delete) account
      tags: [User]
      description: |
        **RBAC:** Any authenticated user can deactivate their own account.
        This will set the user's account as inactive (soft delete).

        **Note:** This endpoint does not require the `x-workspace-id` header as users can deactivate their own account.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Account deactivated
              example:
                status: success
                message: Account deactivated
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/users/workspace:
    get:
      summary: Get workspace users
      tags: [User]
      description: |
        **RBAC:** Any authenticated user can access this endpoint.
        Returns a list of all active users in the current user's workspace.

        **Note:** This endpoint does not require the `x-workspace-id` header as users can access their own workspace data.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Workspace users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: cluser_abc123
                            email:
                              type: string
                              example: alice@company.com
                            name:
                              type: string
                              example: Alice Smith
                            emailVerified:
                              type: boolean
                              example: true
                            isActive:
                              type: boolean
                              example: true
                            role:
                              type: string
                              example: MEMBER
                            workspaceId:
                              type: string
                              example: clworkspace_123xyz
                            createdAt:
                              type: string
                              format: date-time
                              example: "2025-01-15T10:30:00Z"
              example:
                status: success
                data:
                  users:
                    - id: cluser_abc123
                      email: alice@company.com
                      name: Alice Smith
                      emailVerified: true
                      isActive: true
                      role: MEMBER
                      workspaceId: clworkspace_123xyz
                      createdAt: "2025-01-15T10:30:00Z"
                    - id: cluser_def456
                      email: bob@company.com
                      name: Bob Johnson
                      emailVerified: true
                      isActive: true
                      role: ADMIN
                      workspaceId: clworkspace_123xyz
                      createdAt: "2025-01-10T09:15:00Z"
        "400":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/users/stats:
    get:
      summary: Get workspace statistics
      tags: [User]
      description: |
        **RBAC:** Any authenticated user can access this endpoint.
        Returns workspace usage statistics including user counts and member counts.

        **Note:** This endpoint does not require the `x-workspace-id` header as users can access their own workspace data.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Workspace statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      users:
                        type: integer
                        example: 5
                        description: Total users in the workspace
                      activeUsers:
                        type: integer
                        example: 4
                        description: Active users in the workspace
                      members:
                        type: integer
                        example: 3
                        description: Users with MEMBER role in the workspace
              example:
                status: success
                data:
                  users: 5
                  activeUsers: 4
                  members: 3
        "400":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # ===================================
  # ADMIN ENDPOINTS
  # ===================================

  /api/admin/users:
    get:
      summary: List workspace users
      tags: [Admin]
      description: |
        **RBAC:** Only users with the `ADMIN` role can access this endpoint.
        Returns a paginated list of users in the admin's workspace only. Supports optional search, skip, and take query parameters.

        **Workspace Scoped:** This endpoint only returns users from the admin's own workspace for security.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            example: 0
          description: Number of users to skip (for pagination)
        - in: query
          name: take
          schema:
            type: integer
            example: 20
          description: Number of users to return (for pagination)
        - in: query
          name: search
          schema:
            type: string
            example: alice
          description: Search by email or name
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: cluser_abc123
                        email:
                          type: string
                          example: alice@company.com
                        name:
                          type: string
                          example: Alice Smith
                        isActive:
                          type: boolean
                          example: true
                        role:
                          type: string
                          example: MEMBER
                        workspaceId:
                          type: string
                          example: clworkspace_123xyz
                  total:
                    type: integer
                    example: 1
              example:
                status: success
                users:
                  - id: cluser_abc123
                    email: alice@company.com
                    name: Alice Smith
                    isActive: true
                    role: MEMBER
                    workspaceId: clworkspace_123xyz
                total: 1
        "401":
          description: Authentication required or insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/users/{id}:
    get:
      summary: Get workspace user details
      tags: [Admin]
      description: |
        **RBAC:** Only users with the `ADMIN` role can access this endpoint.
        Returns details for a specific user in the admin's workspace only.

        **Workspace Scoped:** This endpoint only returns users from the admin's own workspace for security.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cluser_abc123
                      email:
                        type: string
                        example: alice@company.com
                      name:
                        type: string
                        example: Alice Smith
                      isActive:
                        type: boolean
                        example: true
                      role:
                        type: string
                        example: MEMBER
                      workspaceId:
                        type: string
                        example: clworkspace_123xyz
              example:
                status: success
                user:
                  id: cluser_abc123
                  email: alice@company.com
                  name: Alice Smith
                  isActive: true
                  role: MEMBER
                  workspaceId: clworkspace_123xyz
        "401":
          description: Authentication required or insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/users/{id}/activate:
    post:
      summary: Activate workspace user
      tags: [Admin]
      description: |
        **RBAC:** Only users with the `ADMIN` role can access this endpoint.
        Activates the specified user in the admin's workspace only.

        **Workspace Scoped:** This endpoint only affects users from the admin's own workspace for security.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        "200":
          description: User activated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User activated
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cluser_abc123
                      isActive:
                        type: boolean
                        example: true
              example:
                status: success
                message: User activated
                user:
                  id: cluser_abc123
                  isActive: true
        "401":
          description: Authentication required or insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/users/{id}/deactivate:
    post:
      summary: Deactivate workspace user
      tags: [Admin]
      description: |
        **RBAC:** Only users with the `ADMIN` role can access this endpoint.
        Deactivates the specified user in the admin's workspace only.

        **Workspace Scoped:** This endpoint only affects users from the admin's own workspace for security.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        "200":
          description: User deactivated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User deactivated
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cluser_abc123
                      isActive:
                        type: boolean
                        example: false
              example:
                status: success
                message: User deactivated
                user:
                  id: cluser_abc123
                  isActive: false
        "401":
          description: Authentication required or insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/users/{id}/promote:
    post:
      summary: Promote user to admin
      tags: [Admin]
      description: |
        **RBAC:** Only users with the `ADMIN` role can access this endpoint.
        Promotes a user from MEMBER to ADMIN role in the admin's workspace only.

        **Workspace Scoped:** This endpoint only affects users from the admin's own workspace for security.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID to promote
      responses:
        "200":
          description: User promoted to admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User promoted to admin
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cluser_abc123
                      email:
                        type: string
                        example: alice@company.com
                      name:
                        type: string
                        example: Alice Smith
                      isActive:
                        type: boolean
                        example: true
                      role:
                        type: string
                        example: ADMIN
                      workspaceId:
                        type: string
                        example: clworkspace_123xyz
              example:
                status: success
                message: User promoted to admin
                user:
                  id: cluser_abc123
                  email: alice@company.com
                  name: Alice Smith
                  isActive: true
                  role: ADMIN
                  workspaceId: clworkspace_123xyz
        "400":
          description: User is already an admin or user is inactive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required or insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/users/{id}/demote:
    post:
      summary: Demote admin to member
      tags: [Admin]
      description: |
        **RBAC:** Only users with the `ADMIN` role can access this endpoint.
        Demotes a user from ADMIN to MEMBER role in the admin's workspace only.

        **Workspace Scoped:** This endpoint only affects users from the admin's own workspace for security.
        **Safety Check:** Cannot demote the last admin in the workspace.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID to demote
      responses:
        "200":
          description: User demoted to member
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User demoted to member
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: cluser_abc123
                      email:
                        type: string
                        example: alice@company.com
                      name:
                        type: string
                        example: Alice Smith
                      isActive:
                        type: boolean
                        example: true
                      role:
                        type: string
                        example: MEMBER
                      workspaceId:
                        type: string
                        example: clworkspace_123xyz
              example:
                status: success
                message: User demoted to member
                user:
                  id: cluser_abc123
                  email: alice@company.com
                  name: Alice Smith
                  isActive: true
                  role: MEMBER
                  workspaceId: clworkspace_123xyz
        "400":
          description: User is already a member, user is inactive, or cannot demote last admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required or insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/stats:
    get:
      summary: Get workspace stats
      tags: [Admin]
      description: |
        **RBAC:** Only users with the `ADMIN` role can access this endpoint.
        Returns workspace usage statistics including user counts and member counts for the admin's workspace only.

        **Workspace Scoped:** This endpoint only returns stats for the admin's own workspace for security.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: System stats
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      users:
                        type: integer
                        example: 5
                        description: Total users in the workspace
                      activeUsers:
                        type: integer
                        example: 4
                        description: Active users in the workspace
                      members:
                        type: integer
                        example: 3
                        description: Users with MEMBER role in the workspace
              example:
                status: success
                data:
                  users: 5
                  activeUsers: 4
                  members: 3
        "401":
          description: Authentication required or insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/workspace/{id}:
    delete:
      summary: Delete a workspace (admin only)
      tags: [Admin]
      description: |
        Only users with the ADMIN role can access this endpoint.
        Deletes the specified workspace and all its users.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The workspace ID to delete
      responses:
        "200":
          description: Workspace deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Workspace deleted
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Admin role required or insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  parameters:
    WorkspaceIdHeader:
      name: x-workspace-id
      in: header
      description: Workspace ID for multi-tenancy. Required for all authenticated, workspace-scoped endpoints.
      required: true
      schema:
        type: string
        example: clworkspace_123xyz
  schemas:
    AuthSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Registration successful
        data:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
                  example: clxyz123abc
                email:
                  type: string
                  example: user@example.com
                name:
                  type: string
                  example: John Doe
                role:
                  type: string
                  example: ADMIN
                workspaceId:
                  type: string
                  example: clxyzworkspace123
            workspace:
              type: object
              properties:
                id:
                  type: string
                  example: clxyzworkspace123
                domain:
                  type: string
                  example: example.com
            accessToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            refreshToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            isNewUser:
              type: boolean
              example: false
            provider:
              type: string
              example: google
    RefreshSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Tokens refreshed
        data:
          type: object
          properties:
            accessToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            refreshToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Invalid email or password
            details:
              type: string
              example: Stack trace or additional error details (optional)
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
