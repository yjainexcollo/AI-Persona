// ===================================
// AI-Persona Backend - Database Schema (CORE AUTHENTICATION & USER MANAGEMENT)
// ===================================
// Only models/fields/enums used in backend code are kept

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ===================================
// USER MODEL (single-workspace membership)
// ===================================
model User {
    id            String   @id @default(cuid())
    email         String   @unique
    name          String?
    passwordHash  String?  // Nullable for OAuth-only users
    status        UserStatus @default(PENDING_VERIFY)
    emailVerified Boolean  @default(false)
    verifiedAt    DateTime? // When email was verified
    failedLoginCount Int    @default(0)
    lockedUntil   DateTime? // Account lockout until
    lastLoginAt   DateTime?
    role          MemberRole @default(MEMBER)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    workspaceId   String
    workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    // Profile fields
    avatarUrl     String?  // CDN URL for user avatar
    timezone      String?  @default("UTC")
    locale        String?  @default("en")

    sessions      Session[]
    emailVerifications EmailVerification[]
    passwordResetTokens PasswordResetToken[]
    auditEvents   AuditEvent[]
    
    @@map("users")
    @@index([email])
    @@index([status])
    @@index([emailVerified])
    @@index([failedLoginCount])
    @@index([lockedUntil])
    @@index([workspaceId])
    @@index([status, createdAt]) // For cleanup queries
}

// ===================================
// WORKSPACE MODEL
// ===================================
model Workspace {
    id          String   @id @default(cuid())
    name        String
    domain      String   @unique
    isActive    Boolean  @default(true)
    maxMembers  Int      @default(1000)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Workspace settings
    timezone    String?  @default("UTC")
    locale      String?  @default("en")
    status      WorkspaceStatus @default(ACTIVE)
    
    users       User[]
    deletionRequest WorkspaceDeletion?

    @@map("workspaces")
    @@index([domain])
    @@index([isActive])
    @@index([status])
}

// ===================================
// WORKSPACE DELETION MODEL
// ===================================
model WorkspaceDeletion {
    id          String   @id @default(cuid())
    workspaceId String   @unique
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    requestedBy String   // User ID who requested deletion
    reason      String?
    purgeAfter  DateTime // When workspace will be permanently deleted
    createdAt   DateTime @default(now())
    
    @@map("workspace_deletions")
    @@index([workspaceId])
    @@index([purgeAfter])
}

// ===================================
// SESSION MODEL
// ===================================
model Session {
    id            String   @id @default(cuid())
    refreshToken  String   @unique
    expiresAt     DateTime
    isActive      Boolean  @default(true)
    lastUsedAt    DateTime @default(now())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    userId        String
    userAgent     String?  // Browser/device info
    ipAddress     String?  // IP address
    deviceId      String?  // Unique device identifier
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@map("sessions")
    @@index([userId])
    @@index([refreshToken])
    @@index([expiresAt])
    @@index([isActive])
    @@index([userId, deviceId]) // For device-specific queries
}

// ===================================
// EMAIL VERIFICATION MODEL
// ===================================
model EmailVerification {
    id        String   @id @default(cuid())
    userId    String
    token     String   @unique
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    
    @@map("email_verifications")
    @@index([userId])
    @@index([token])
    @@index([expiresAt])
}

// ===================================
// PASSWORD RESET TOKEN MODEL
// ===================================
model PasswordResetToken {
    id        String   @id @default(cuid())
    userId    String
    token     String   @unique
    expiresAt DateTime
    used      Boolean  @default(false)
    usedAt    DateTime?
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    
    @@map("password_reset_tokens")
    @@index([userId])
    @@index([token])
    @@index([expiresAt])
    @@index([used])
}

// ===================================
// AUDIT EVENT MODEL
// ===================================
model AuditEvent {
    id          String      @id @default(cuid())
    userId      String
    eventType   AuditEventType
    eventData   Json?       // Additional event data
    ipAddress   String?
    userAgent   String?
    traceId     String?     // Request trace ID
    createdAt   DateTime    @default(now())
    
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@map("audit_events")
    @@index([userId])
    @@index([eventType])
    @@index([createdAt])
    @@index([traceId])
}

// ===================================
// ENUMS
// ===================================
enum UserStatus {
    PENDING_VERIFY
    ACTIVE
    DEACTIVATED
    PENDING_DELETION
}

enum MemberRole {
    ADMIN
    MEMBER
}

enum WorkspaceStatus {
    ACTIVE
    PENDING_DELETION
    DELETED
}

enum AuditEventType {
    REGISTER
    VERIFY_EMAIL
    LOGIN_SUCCESS
    LOGIN_FAILED
    LOGOUT
    REFRESH_TOKEN
    REQUEST_PASSWORD_RESET
    RESET_PASSWORD
    CHANGE_PASSWORD
    DEACTIVATE_ACCOUNT
    REACTIVATE_ACCOUNT
    ROLE_CHANGED
    SESSION_REVOKED
    ACCOUNT_LOCKED
    ACCOUNT_UNLOCKED
    PROFILE_UPDATED
    AVATAR_UPLOADED
    WORKSPACE_UPDATED
    MEMBER_ROLE_CHANGED
    MEMBER_REMOVED
    WORKSPACE_DELETION_REQUESTED
}
